{
	"info": {
		"_postman_id": "a5fee1f5-85bf-4492-b98b-560add577087",
		"name": "Postman_HW3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"auth_token\", responseBody.token);\r",
							"\r",
							"console.log(\"token = \", responseBody.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"login\": \"vladbubnov\"}\r\n{\"password\": \"qwerty\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"\r",
							"pm.test(\"Status is code 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Проверка структуры json в ответе\r",
							"\r",
							"const schema =  {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", function() {\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var requestBody = JSON.parse(request.data);\r",
							"\r",
							"var responseBody = pm.response.json();\r",
							"\r",
							"console.log(\"requestBody =\", requestBody.salary);\r",
							"\r",
							"pm.test(\"after 6 moths, ratio = 2\", function() {\r",
							"    pm.expect(responseBody.qa_salary_after_6_months).to.eql(requestBody.salary*2)\r",
							"});\r",
							"\r",
							"// 4. Достать значение из поля 'u_salary_1.5_year' и передать в окружение\r",
							"\r",
							"var u_salary_1_5_year = responseBody.person.u_salary_1_5_year;\r",
							"\r",
							"console.log(\"u_salary_1_5_year = \", u_salary_1_5_year);\r",
							"\r",
							"pm.environment.set(\"salary\", u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"age\": 25,\r\n\"salary\": 5000,\r\n\"name\": \"Vlad\",\r\n\"auth_token\": \"{{auth_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status is code 200 \", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"\r",
							"var responseBody = pm.response.json();\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var requestBody = request.data;\r",
							"\r",
							"var responseBody = pm.response.json();\r",
							"\r",
							"console.log(\"responseBody =\", responseBody);\r",
							"\r",
							"pm.test(\"ratio = 1\", function() {\r",
							"    pm.expect(responseBody.salary[0]).to.eql(requestBody.salary*1)\r",
							"});\r",
							"\r",
							"var resBody_salary_1 = +responseBody.salary[1];\r",
							"\r",
							"console.log(\"ratio = 2\", resBody_salary_1);\r",
							"\r",
							"pm.test(\"ratio = 2\", function() {\r",
							"    pm.expect(resBody_salary_1).to.eql(requestBody.salary*2)\r",
							"});\r",
							"\r",
							"var resBody_salary_2 = +responseBody.salary[2];\r",
							"\r",
							"console.log(\"ratio = 3\", resBody_salary_2);\r",
							"\r",
							"pm.test(\"ratio = 3\", function() {\r",
							"    pm.expect(resBody_salary_2).to.eql(requestBody.salary*3)\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"var salary0 = responseBody.salary[0];\r",
							"var salary1 = resBody_salary_1;\r",
							"var salary2 = resBody_salary_2;\r",
							"\r",
							"console.log(\"Salary array =\", salary0, salary1, salary2);\r",
							"\r",
							"pm.test(\"Salary[2]>Salary[1]>Salary[0]\", function() {\r",
							"    pm.expect(salary2).greaterThan(salary1);\r",
							"    pm.expect(salary2).greaterThan(salary0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Verify status is code 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"\r",
							"var responsBody = pm.response.json();\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var requestBody = request.data;\r",
							"var daily_food = responsBody.daily_food;\r",
							"var daily_sleep = responsBody.daily_sleep; \r",
							"var weight = +requestBody.weight;\r",
							"var daily_food_ratio = daily_food / weight;\r",
							"var daily_sleep_ratio = daily_sleep / weight;\r",
							"\r",
							"console.log(\"daily_food_ratio = \", daily_food_ratio);\r",
							"console.log(\"daily_sleep_ratio = \", daily_sleep_ratio);\r",
							"\r",
							"pm.test(\"Ratio daily food = \" + daily_food_ratio, function() {\r",
							"    pm.expect(daily_food).to.eql(weight*daily_food_ratio)\r",
							"});\r",
							"\r",
							"pm.test(\"Ratio daily sleep = \" + daily_sleep_ratio, function() {\r",
							"    pm.expect(daily_sleep).to.eql(weight*daily_sleep_ratio)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "4",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "15",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alma",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}} ",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_use",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Verify status code is 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"\r",
							"var responseBody = pm.response.json();\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"\r",
							"var environment_name = pm.environment.get(\"name\");\r",
							"var response_name = responseBody.name;\r",
							"\r",
							"console.log(\"Response name = \", response_name);\r",
							"console.log(\"Environment name = \", environment_name);\r",
							"\r",
							"pm.test(\"Request name = environment name\", function() {\r",
							"    pm.expect(response_name).to.eql(environment_name)\r",
							"});\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"var response_age = +responseBody.age;\r",
							"var request_age = +request.data.age;\r",
							"\r",
							"console.log(\"Response age =\",response_age + \" , \" +\"Request age = \", request_age);\r",
							"\r",
							"pm.test(\"Response age = request_age\", function() {\r",
							"    pm.expect(response_age).to.eql(request_age)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"\r",
							"var responseBody = pm.response.json();\r",
							"\r",
							"var randomID = responseBody[Math.floor(Math.random() * responseBody.length)];\r",
							"\r",
							"console.log(randomID);\r",
							"\r",
							"// 2) В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"var Cur_ID = randomID.Cur_ID;\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}